#pragma kernel cs_generate_map
#pragma kernel cs_draw_map
#include <UnityShaderVariables.cginc>

// Aggregated map, which is an accumulation over time
RWTexture2D<float2> aggregate_map;

// Generated output texture which are new every update.
RWTexture2D<float4> output_heat_map;
RWTexture2D<float4> output_time_map;
RWTexture2D<float4> output_time_map_with_top;

// Camera render to put under time map
Texture2D<float4> top_map;

// Settings
float initial_gain;
float end_gain;

// Update every time
float2 place_been;
float time_since_capture_began;

// Converts a hue of 0-1, into an rgba value
float4 hue_to_rgb(const in float h)
{
    float r = abs(h * 6 - 3) - 1;
    float g = 2 - abs(h * 6 - 2);
    float b = 2 - abs(h * 6 - 4);
    return saturate(float4(r,g,b,1));
}

[numthreads(32,32,1)]
void cs_generate_map (uint3 id : SV_DispatchThreadID)
{
    const float2 normalized_been_at = (place_been+float2(5,5))/10.f;
    const float distance_norm = distance(id.xy/2048.f, normalized_been_at); // Normalized distance, the further away the higher
    const float nearness = 1 - distance_norm*initial_gain; // Nearness is higher, when near
    const float smooth = pow(saturate(nearness)*end_gain, 0.8); // Smoothed out, since values get closer on powers below 1
    aggregate_map[id.xy] += float2(smooth*unity_DeltaTime.y, smooth*time_since_capture_began);
}

[numthreads(32,32,1)]
void cs_draw_map (uint3 id : SV_DispatchThreadID)
{
    const float2 height_and_time = aggregate_map[id.xy];
    const float height01 = saturate(height_and_time.x);
    output_heat_map[id.xy] = hue_to_rgb(1-clamp(height_and_time.x, 0.3, 1))*saturate(height01*2);

    const float time_norm = frac(height_and_time.y/(time_since_capture_began*100));
    const float4 time_color = hue_to_rgb(1-time_norm)*saturate(height01*2);
    output_time_map[id.xy] = time_color;
    output_time_map_with_top[id.xy] = time_color + (1-time_color.a) * top_map[id.xy];
}